# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import snake_pb2 as snake__pb2


class SnakeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addSnake = channel.unary_unary(
                '/SnakeService/addSnake',
                request_serializer=snake__pb2.JoinRequest.SerializeToString,
                response_deserializer=snake__pb2.Snake.FromString,
                )
        self.moveSnake = channel.unary_unary(
                '/SnakeService/moveSnake',
                request_serializer=snake__pb2.MoveRequest.SerializeToString,
                response_deserializer=snake__pb2.Snake.FromString,
                )
        self.getSnakes = channel.unary_stream(
                '/SnakeService/getSnakes',
                request_serializer=snake__pb2.GetRequest.SerializeToString,
                response_deserializer=snake__pb2.Snake.FromString,
                )
        self.getFood = channel.unary_stream(
                '/SnakeService/getFood',
                request_serializer=snake__pb2.FoodRequest.SerializeToString,
                response_deserializer=snake__pb2.Point.FromString,
                )
        self.addMoreFood = channel.unary_unary(
                '/SnakeService/addMoreFood',
                request_serializer=snake__pb2.FoodRequest.SerializeToString,
                response_deserializer=snake__pb2.FoodRequest.FromString,
                )
        self.checkCollision = channel.unary_unary(
                '/SnakeService/checkCollision',
                request_serializer=snake__pb2.CollisionRequest.SerializeToString,
                response_deserializer=snake__pb2.CollisionResponse.FromString,
                )


class SnakeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addSnake(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def moveSnake(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSnakes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFood(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addMoreFood(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkCollision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SnakeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addSnake': grpc.unary_unary_rpc_method_handler(
                    servicer.addSnake,
                    request_deserializer=snake__pb2.JoinRequest.FromString,
                    response_serializer=snake__pb2.Snake.SerializeToString,
            ),
            'moveSnake': grpc.unary_unary_rpc_method_handler(
                    servicer.moveSnake,
                    request_deserializer=snake__pb2.MoveRequest.FromString,
                    response_serializer=snake__pb2.Snake.SerializeToString,
            ),
            'getSnakes': grpc.unary_stream_rpc_method_handler(
                    servicer.getSnakes,
                    request_deserializer=snake__pb2.GetRequest.FromString,
                    response_serializer=snake__pb2.Snake.SerializeToString,
            ),
            'getFood': grpc.unary_stream_rpc_method_handler(
                    servicer.getFood,
                    request_deserializer=snake__pb2.FoodRequest.FromString,
                    response_serializer=snake__pb2.Point.SerializeToString,
            ),
            'addMoreFood': grpc.unary_unary_rpc_method_handler(
                    servicer.addMoreFood,
                    request_deserializer=snake__pb2.FoodRequest.FromString,
                    response_serializer=snake__pb2.FoodRequest.SerializeToString,
            ),
            'checkCollision': grpc.unary_unary_rpc_method_handler(
                    servicer.checkCollision,
                    request_deserializer=snake__pb2.CollisionRequest.FromString,
                    response_serializer=snake__pb2.CollisionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SnakeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SnakeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addSnake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SnakeService/addSnake',
            snake__pb2.JoinRequest.SerializeToString,
            snake__pb2.Snake.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def moveSnake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SnakeService/moveSnake',
            snake__pb2.MoveRequest.SerializeToString,
            snake__pb2.Snake.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSnakes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/SnakeService/getSnakes',
            snake__pb2.GetRequest.SerializeToString,
            snake__pb2.Snake.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFood(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/SnakeService/getFood',
            snake__pb2.FoodRequest.SerializeToString,
            snake__pb2.Point.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addMoreFood(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SnakeService/addMoreFood',
            snake__pb2.FoodRequest.SerializeToString,
            snake__pb2.FoodRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkCollision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SnakeService/checkCollision',
            snake__pb2.CollisionRequest.SerializeToString,
            snake__pb2.CollisionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
